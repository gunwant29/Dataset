import heapq

# Goal state
goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)

# Manhattan distance heuristic
def manhattan(state):
    distance = 0
    for i, tile in enumerate(state):
        if tile == 0:
            continue
        goal_index = goal.index(tile)
        x1, y1 = divmod(i, 3)
        x2, y2 = divmod(goal_index, 3)
        distance += abs(x1 - x2) + abs(y1 - y2)
    return distance

# Generate neighbor states
def get_neighbors(state):
    neighbors = []
    i = state.index(0)
    x, y = divmod(i, 3)

    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            ni = nx * 3 + ny
            new_state = list(state)
            new_state[i], new_state[ni] = new_state[ni], new_state[i]
            neighbors.append(tuple(new_state))
    return neighbors

# A* search
def a_star(start):
    queue = [(manhattan(start), 0, start, [start])]  # (f, g, state, path)
    visited = set()

    while queue:
        f, g, state, path = heapq.heappop(queue)
        if state == goal:
            return path

        if state in visited:
            continue
        visited.add(state)

        for neighbor in get_neighbors(state):
            if neighbor in visited:
                continue
            new_g = g + 1
            new_f = new_g + manhattan(neighbor)
            heapq.heappush(queue, (new_f, new_g, neighbor, path + [neighbor]))

    return None  # No solution found

# Example input state
start_state = (1, 2, 3,
               4, 0, 6,
               7, 5, 8)

# Run A* and print result
solution = a_star(start_state)
if solution:
    print("Steps to solve:", len(solution) - 1)
    for state in solution:
        print(state[:3])
        print(state[3:6])
        print(state[6:])
        print()
else:
    print("No solution found.")
